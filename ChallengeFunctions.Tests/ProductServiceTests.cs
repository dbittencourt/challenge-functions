using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AutoFixture;
using Challenge.Models;
using Challenge.Services;
using Challenge.Sorters;
using FluentAssertions;
using Moq;
using Moq.Protected;
using Newtonsoft.Json;
using Xunit;

namespace ChallengeFunctions.Tests
{
    public class ProductServiceTests
    {
        private readonly Fixture _fixture;
        private readonly IEnumerable<Product> _products;
        private readonly IEnumerable<Customer> _customers;
        private readonly IProductService _productService;
        private readonly IProductSorterFactory _factory;
        private readonly Mock<HttpMessageHandler> _handlerMock;
        private readonly HttpClient _httpClient;
        
        public ProductServiceTests()
        {
            Environment.SetEnvironmentVariable("AppToken","token");
            Environment.SetEnvironmentVariable("WooliesApiEndpoint","http://endpoint/");
            
            var rand = new Random();
            _fixture = new Fixture();
            _products = _fixture.CreateMany<Product>(5);

            _customers = _fixture.Build<Customer>()
                .Without(c => c.Products)
                .CreateMany(5);

            foreach (var customer in _customers)
            {
                // generates a product array of random size from products generated by autofixture
                customer.Products = _products.OrderBy(p => Guid.NewGuid())
                    .Take(rand.Next(1, 3))
                    .ToArray();
            }
            
            _factory = new ProductSorterFactory();
            
            _handlerMock = new Mock<HttpMessageHandler>(MockBehavior.Strict);
            _httpClient = new HttpClient(_handlerMock.Object);
            _productService = new ProductService(_factory, _httpClient);
        }
        
        [Fact]
        public async void GetSortedProductsAsync_WithSortLow_ReturnsLowToHighProducts()
        {
            SetupHttpMessageHandlerMock(HttpStatusCode.OK, _products);
            
            var products = await _productService.GetSortedProductsAsync(SortOption.Low);
            
            products.Should().BeInAscendingOrder(p => p.Price);
        }

        [Fact]
        public async void GetSortedProductsAsync_WithSortHigh_ReturnsHighToLowProducts()
        {
            SetupHttpMessageHandlerMock(HttpStatusCode.OK, _products);
            
            var products = await _productService.GetSortedProductsAsync(SortOption.High);
            
            products.Should().BeInDescendingOrder(p => p.Price); 
        }

        [Fact]
        public async void GetSortedProductsAsync_WithSortAscending_ReturnsAToZProducts()
        {
            SetupHttpMessageHandlerMock(HttpStatusCode.OK, _products);
            
            var products = await _productService.GetSortedProductsAsync(SortOption.Ascending);
            
            products.Should().BeInAscendingOrder(p => p.Name); 
        }
        
        [Fact]
        public async void GetSortedProductsAsync_WithSortDescending_ReturnsZToAProducts()
        {
            SetupHttpMessageHandlerMock(HttpStatusCode.OK, _products);
            
            var products = await _productService.GetSortedProductsAsync(SortOption.Descending);
            
            products.Should().BeInDescendingOrder(p => p.Name); 
        }
        
        [Fact]
        public async void GetProductsAsync_WithSortRecommended_ReturnsPopularityProducts()
        {
            var sorter = new PopularitySorter();
            SetupHttpMessageHandlerMock(HttpStatusCode.OK, _customers);
            
            var products = await _productService.GetSortedProductsAsync(SortOption.Recommended);

            var popularityProducts = sorter.Sort(_customers.SelectMany(c => c.Products));
            products.Should().BeEquivalentTo(popularityProducts); 
        }
        
        private void SetupHttpMessageHandlerMock(HttpStatusCode code, object result)
        {
            _handlerMock.Protected()
                .Setup<Task<HttpResponseMessage>>("SendAsync", 
                    ItExpr.IsAny<HttpRequestMessage>(), ItExpr.IsAny<CancellationToken>())
                .ReturnsAsync(new HttpResponseMessage
                {
                    StatusCode = code,
                    Content = new StringContent(JsonConvert.SerializeObject(result), Encoding.UTF8, "application/json")
                })
                .Verifiable();
        }
    }
}